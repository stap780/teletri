# Name of your application. Used to uniquely configure containers.
service: teletri

# Name of the container image.
image: panaet780/teletri

# Deploy to these servers.
servers:
  web:
    - 82.97.252.66

# Enable SSL auto certification via Let's Encrypt and allow for multiple apps on a single web server.
proxy:
  ssl: true
  host: teletri.ru

# Credentials for your image host.
registry:
  username: panaet780
  password:
    - KAMAL_REGISTRY_PASSWORD

# Configure builder setup.
builder:
  arch: amd64
  args:
    RUBY_VERSION: 3.3.0

# Inject ENV variables into containers (secrets come from .kamal/secrets).
env:
  clear:
    RAILS_ENV: production
    DB_HOST: 82.97.252.66
  secret:
    - RAILS_MASTER_KEY
    - AWS_ACCESS_KEY_ID
    - AWS_SECRET_ACCESS_KEY
    - AWS_ENDPOINT
    - AWS_REGION
    - AWS_BUCKET
    - POSTGRES_PASSWORD

# Configure the `postgres` accessory.
accessories:
  db:
    #url: postgresql://postgres:postgres@172.17.0.1:5000/production
    image: postgres:15
    host: 82.97.252.66
    port: "127.0.0.1:5432:5432"
    env:
      clear:
        SOLID_QUEUE_IN_PUMA: true
        RAILS_LOG_LEVEL: debug
        POSTGRES_USER: POSTGRES_USER
        POSTGRES_DB: teletri_production
      secret:
        - POSTGRES_PASSWORD
    files:
      - config/init.sql:/docker-entrypoint-initdb.d/setup.sql
    directories:
      - data:/var/lib/postgresql/data
  queue:
    image: postgres:15
    host: 82.97.252.66
    port: "127.0.0.1:5433:5433"
    env:
      clear:
        POSTGRES_USER: POSTGRES_USER
        POSTGRES_DB: teletri_production_queue
      secret:
        - POSTGRES_PASSWORD
    directories:
      - data:/var/lib/postgresql/data
aliases:
  console: app exec --interactive --reuse 'bin/rails console'
  shell: app exec --interactive --reuse 'bash'
  logs: app logs -f
  dbc: app exec --interactive --reuse 'bin/rails db:console'